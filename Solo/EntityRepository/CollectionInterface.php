<?php declare(strict_types=1);

namespace Solo\EntityRepository;

use IteratorAggregate;
use JsonSerializable;

/**
 * Interface representing a collection of entities.
 *
 * @template T of EntityInterface
 * @extends IteratorAggregate<int, T>
 */
interface CollectionInterface extends IteratorAggregate, JsonSerializable
{
    /**
     * Returns the number of items in the collection.
     *
     * @return int The count of items.
     */
    public function count(): int;

    /**
     * Converts the collection to an array.
     *
     * @return array<int, T> The collection as an array.
     */
    public function toArray(): array;

    /**
     * Filters the collection using a callback function.
     *
     * @param callable $callback The function used for filtering.
     * @return static<T> A new collection containing the filtered items.
     */
    public function filter(callable $callback): static;

    /**
     * Transforms the collection by applying a callback function to each item.
     *
     * @template TMapResult of EntityInterface
     * @param callable(T): TMapResult $callback The function used for transformation.
     * @return static<TMapResult> A new collection with transformed items.
     */
    public function map(callable $callback): static;

    /**
     * Returns the first item in the collection or null if it is empty.
     *
     * @return EntityInterface|null The first item or null.
     */
    public function first(): ?EntityInterface;

    /**
     * Returns the last item in the collection or null if it is empty.
     *
     * @return EntityInterface|null The last item or null.
     */
    public function last(): ?EntityInterface;

    /**
     * Retrieves an item at a specific index.
     *
     * @param mixed $offset The index of the item.
     * @return EntityInterface|null The item at the given index or null if not found.
     */
    public function offsetGet(mixed $offset): ?EntityInterface;

    /**
     * Add an item to the collection.
     *
     * @param T $item The item to add
     */
    public function add(EntityInterface $item): void;

    /**
     * Remove an item from the collection.
     *
     * @param T $item The item to remove
     */
    public function remove(EntityInterface $item): void;

    /**
     * Sort the collection by the value returned from the callback.
     *
     * @param callable(T): mixed $callback
     * @param bool $ascending
     * @return static<T> A new collection with sorted items.
     */
    public function sortBy(callable $callback, bool $ascending = true): static;

    /**
     * Sort the collection by a property.
     *
     * @param string $property
     * @param bool $ascending
     * @return static<T> A new collection with sorted items.
     */
    public function sortByProperty(string $property, bool $ascending = true): static;

    /**
     * Pluck a specific property from each item in the collection.
     *
     * @param string $property
     * @return static<T> A new collection with only items having the specified property.
     */
    public function pluck(string $property): static;

    /**
     * Group items by a key generated by the callback.
     *
     * @param callable(T): string|int $callback
     * @return array<string|int, static<T>> An array of new collections grouped by callback result.
     */
    public function groupBy(callable $callback): array;

    /**
     * Index the collection by a given property.
     *
     * @param string $property
     * @return static<T> A new collection with items indexed by the specified property.
     */
    public function indexBy(string $property): static;
}